{
  "version": 3,
  "sources": ["src/app/api.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { environment } from '../environments/environment';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Api {\r\n  private http = inject(HttpClient);\r\n\r\n  // Merkezî base URL (gerekirse environment'a taşınabilir)\r\n  private readonly baseUrl = environment.apiBaseUrl;\r\n\r\n  // Yardımcı: path'i tam URL'ye çevir\r\n  private url(path: string) {\r\n    if (!path) return this.baseUrl;\r\n    return path.startsWith('http') ? path : `${this.baseUrl}/${path.replace(/^\\//,'')}`;\r\n  }\r\n\r\n  // Yardımcı: object -> HttpParams\r\n  private toParams(params?: Record<string, any>): HttpParams | undefined {\r\n    if (!params) return undefined;\r\n    let hp = new HttpParams();\r\n    Object.entries(params).forEach(([k, v]) => {\r\n      if (v === null || v === undefined || v === '') return;\r\n      hp = hp.set(k, String(v));\r\n    });\r\n    return hp;\r\n  }\r\n\r\n  get<T>(path: string, params?: Record<string, any>): Observable<T> {\r\n    return this.http.get<T>(this.url(path), { params: this.toParams(params) })\r\n      .pipe(catchError(this.handle));\r\n  }\r\n\r\n  list<T = any>(resource: string, params?: Record<string, any>): Observable<T[]> {\r\n    return this.get<T[]>(resource, params);\r\n  }\r\n\r\n  post<T>(path: string, body: unknown): Observable<T> {\r\n    return this.http.post<T>(this.url(path), body)\r\n      .pipe(catchError(this.handle));\r\n  }\r\n\r\n  put<T>(path: string, body: unknown): Observable<T> {\r\n    return this.http.put<T>(this.url(path), body)\r\n      .pipe(catchError(this.handle));\r\n  }\r\n\r\n  patch<T>(path: string, body: unknown): Observable<T> {\r\n    return this.http.patch<T>(this.url(path), body)\r\n      .pipe(catchError(this.handle));\r\n  }\r\n\r\n  delete<T>(path: string): Observable<T> {\r\n    return this.http.delete<T>(this.url(path))\r\n      .pipe(catchError(this.handle));\r\n  }\r\n\r\n  // Kaynak (collection) builder: api.collection('users').create({...}) gibi kullanım sağlar\r\n  collection(resource: string) {\r\n    const base = resource.replace(/\\/$/, '');\r\n    return {\r\n      all: <T = any>(params?: Record<string, any>) => this.list<T>(base, params),\r\n      get: <T = any>(id: string | number) => this.get<T>(`${base}/${id}`),\r\n      create: <T = any>(body: any) => this.post<T>(base, body),\r\n      update: <T = any>(id: string | number, body: any) => this.put<T>(`${base}/${id}`, body),\r\n      patch: <T = any>(id: string | number, body: any) => this.patch<T>(`${base}/${id}`, body),\r\n      remove: <T = any>(id: string | number) => this.delete<T>(`${base}/${id}`)\r\n    } as const;\r\n  }\r\n\r\n  private handle = (err: any) => {\r\n    // İleride logging / toast entegre edebilirsin\r\n    return throwError(() => err);\r\n  };\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;IASa;;;;;AATb;AACA;AACA;AACA;AAMO,IAAM,MAAN,MAAMA,KAAG;MACN,OAAO,OAAO,UAAU;;MAGf,UAAU,YAAY;;MAG/B,IAAI,MAAY;AACtB,YAAI,CAAC;AAAM,iBAAO,KAAK;AACvB,eAAO,KAAK,WAAW,MAAM,IAAI,OAAO,GAAG,KAAK,OAAO,IAAI,KAAK,QAAQ,OAAM,EAAE,CAAC;MACnF;;MAGQ,SAAS,QAA4B;AAC3C,YAAI,CAAC;AAAQ,iBAAO;AACpB,YAAI,KAAK,IAAI,WAAU;AACvB,eAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,MAAK;AACxC,cAAI,MAAM,QAAQ,MAAM,UAAa,MAAM;AAAI;AAC/C,eAAK,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;QAC1B,CAAC;AACD,eAAO;MACT;MAEA,IAAO,MAAc,QAA4B;AAC/C,eAAO,KAAK,KAAK,IAAO,KAAK,IAAI,IAAI,GAAG,EAAE,QAAQ,KAAK,SAAS,MAAM,EAAC,CAAE,EACtE,KAAK,WAAW,KAAK,MAAM,CAAC;MACjC;MAEA,KAAc,UAAkB,QAA4B;AAC1D,eAAO,KAAK,IAAS,UAAU,MAAM;MACvC;MAEA,KAAQ,MAAc,MAAa;AACjC,eAAO,KAAK,KAAK,KAAQ,KAAK,IAAI,IAAI,GAAG,IAAI,EAC1C,KAAK,WAAW,KAAK,MAAM,CAAC;MACjC;MAEA,IAAO,MAAc,MAAa;AAChC,eAAO,KAAK,KAAK,IAAO,KAAK,IAAI,IAAI,GAAG,IAAI,EACzC,KAAK,WAAW,KAAK,MAAM,CAAC;MACjC;MAEA,MAAS,MAAc,MAAa;AAClC,eAAO,KAAK,KAAK,MAAS,KAAK,IAAI,IAAI,GAAG,IAAI,EAC3C,KAAK,WAAW,KAAK,MAAM,CAAC;MACjC;MAEA,OAAU,MAAY;AACpB,eAAO,KAAK,KAAK,OAAU,KAAK,IAAI,IAAI,CAAC,EACtC,KAAK,WAAW,KAAK,MAAM,CAAC;MACjC;;MAGA,WAAW,UAAgB;AACzB,cAAM,OAAO,SAAS,QAAQ,OAAO,EAAE;AACvC,eAAO;UACL,KAAK,CAAU,WAAiC,KAAK,KAAQ,MAAM,MAAM;UACzE,KAAK,CAAU,OAAwB,KAAK,IAAO,GAAG,IAAI,IAAI,EAAE,EAAE;UAClE,QAAQ,CAAU,SAAc,KAAK,KAAQ,MAAM,IAAI;UACvD,QAAQ,CAAU,IAAqB,SAAc,KAAK,IAAO,GAAG,IAAI,IAAI,EAAE,IAAI,IAAI;UACtF,OAAO,CAAU,IAAqB,SAAc,KAAK,MAAS,GAAG,IAAI,IAAI,EAAE,IAAI,IAAI;UACvF,QAAQ,CAAU,OAAwB,KAAK,OAAU,GAAG,IAAI,IAAI,EAAE,EAAE;;MAE5E;MAEQ,SAAS,CAAC,QAAY;AAE5B,eAAO,WAAW,MAAM,GAAG;MAC7B;;AApEW,UAAG,WAAA;MAHf,WAAW;QACV,YAAY;OACb;OACY,GAAG;;;",
  "names": ["Api"]
}
