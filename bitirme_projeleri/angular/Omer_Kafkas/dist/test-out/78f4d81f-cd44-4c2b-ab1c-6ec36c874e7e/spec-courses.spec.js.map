{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\pages\\courses\\courses.html", "angular:jit:style:src\\app\\pages\\courses\\courses.css", "src/app/pages/courses/courses.ts", "src/app/pages/courses/courses.spec.ts"],
  "sourcesContent": ["<app-background-item></app-background-item>\r\n<div class=\"container mt-5 pt-4\">\r\n  <div class=\"row mb-3\">\r\n    <div class=\"col-md-4\">\r\n  <select class=\"form-select\" (change)=\"selectedCategory.set($any($event.target).value)\">\r\n        <option value=\"\">T\u00FCm Kategoriler</option>\r\n        @for(cat of categories; track cat.id){\r\n          <option [value]=\"cat.id\">{{ cat.name }}</option>\r\n        }\r\n      </select>\r\n    </div>\r\n  </div>\r\n</div>\r\n<app-courses-item\r\n  [courses]=\"filtered()\"\r\n  [enrolling]=\"enrolling\"\r\n  [enrolled]=\"enrolled\"\r\n  [enroll]=\"enroll\"\r\n></app-courses-item>\r\n", "/* src/app/pages/courses/courses.css */\n/*# sourceMappingURL=courses.css.map */\n", "import { Component, inject, ChangeDetectionStrategy, OnInit, signal, computed } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Api } from '../../api';\r\nimport { EnrollmentService } from '../../services/enrollment.service';\r\nimport { CoursesItem } from '../../components/courses-item/courses-item';\r\nimport { BackgroundItem } from '../../components/background-item/background-item';\r\nimport { CommonModule } from '@angular/common';\r\n\r\ninterface Course {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  price?: number;\r\n  image?: string;\r\n  instructorName?: string;\r\n}\r\n\r\ninterface Category { id: string; name: string; }\r\n\r\n@Component({\r\n  selector: 'app-courses',\r\n  standalone: true,\r\n  imports: [CommonModule, BackgroundItem, CoursesItem],\r\n  templateUrl: './courses.html',\r\n  styleUrl: './courses.css',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Courses implements OnInit {\r\n  private readonly api = inject(Api);\r\n  private readonly route = inject(ActivatedRoute);\r\n  private readonly enrollmentEvents = inject(EnrollmentService);\r\n  courses: Course[] = [];\r\n  categories: Category[] = [];\r\n  selectedCategory = signal<string>('');\r\n  filtered = computed(() => {\r\n    const cat = this.selectedCategory();\r\n    if(!cat) return this.courses;\r\n    return this.courses.filter(c => c && (c as any).categoryId === cat);\r\n  });\r\n  enrolling = new Set<string>();\r\n  enrolled = new Set<string>();\r\n  loading = true;\r\n  error = false;\r\n  http: any;\r\n\r\n  ngOnInit() {\r\n    const resolved = this.route.snapshot.data['courses'] as Course[] | undefined;\r\n    try {\r\n      if (resolved) {\r\n        this.courses = [...resolved];\r\n      }\r\n      this.loading = false;\r\n    } catch {\r\n      this.loading = false;\r\n      this.error = true;\r\n    }\r\n    // Kullanıcının kayıt olduğu kursları yükle\r\n    const userRaw = typeof window !== 'undefined' ? localStorage.getItem('currentUser') : null;\r\n    const user = userRaw ? JSON.parse(userRaw) : null;\r\n    if (user) {\r\n      this.api.list<any>('enrollments?userId=' + user.id).subscribe((enrolls) => {\r\n        for (const e of enrolls) this.enrolled.add(e.courseId);\r\n      });\r\n    }\r\n    // Kategorileri çek\r\n    this.api.list<Category>('categories').subscribe(cats => this.categories = cats);\r\n  }\r\n\r\n  enroll = (courseId: string) => {\r\n    if (this.enrolled.has(courseId)) {\r\n      alert('Bu kursa zaten kayıtlısınız');\r\n      return;\r\n    }\r\n  this.enrolling = new Set([...this.enrolling, courseId]);\r\n    const userRaw = typeof window !== 'undefined' ? localStorage.getItem('currentUser') : null;\r\n    const user = userRaw ? JSON.parse(userRaw) : null;\r\n    if (!user) return;\r\n    // Sunucu tarafında da kontrol et\r\n    this.api.list<any>('enrollments', { userId: user.id, courseId }).subscribe(existing => {\r\n      if (existing.length) {\r\n  const newEnrolling = new Set(this.enrolling); newEnrolling.delete(courseId); this.enrolling = newEnrolling;\r\n  this.enrolled = new Set([...this.enrolled, courseId]);\r\n        alert('Bu kursa zaten kayıtlısınız');\r\n        return;\r\n      }\r\n      const payload = { userId: user.id, courseId };\r\n      this.api.post('enrollments', payload).subscribe({\r\n        next: () => {\r\n          const newEnrolling2 = new Set(this.enrolling); newEnrolling2.delete(courseId); this.enrolling = newEnrolling2;\r\n          this.enrolled = new Set([...this.enrolled, courseId]);\r\n          this.enrollmentEvents.notifyEnrollment();\r\n          alert('Kursa kayıt yapıldı');\r\n        },\r\n        error: () => {\r\n          const newEnrolling3 = new Set(this.enrolling); newEnrolling3.delete(courseId); this.enrolling = newEnrolling3;\r\n          alert('Kayıt sırasında hata oluştu');\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  // Manuel yenileme (gerekirse template'e buton eklenebilir)\r\n  refreshCourses() {\r\n    this.loading = true; this.error = false;\r\n    this.api.list<Course>('courses').subscribe({\r\n      next: list => { this.courses = [...list]; this.loading = false; },\r\n      error: () => { this.loading = false; this.error = true; }\r\n    });\r\n  }\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Courses } from './courses';\r\nimport { globalTestConfig } from '../../../test-setup';\r\n\r\ndescribe('Courses', () => {\r\n  let component: Courses;\r\n  let fixture: ComponentFixture<Courses>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Courses],\r\n      providers: [...globalTestConfig.providers]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Courses);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": ["courses_default", "init_courses", "Courses", "init_courses"]
}
