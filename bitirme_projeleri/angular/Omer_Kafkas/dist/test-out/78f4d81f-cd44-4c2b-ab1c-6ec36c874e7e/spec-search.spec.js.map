{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\pages\\search\\search.html", "angular:jit:style:src\\app\\pages\\search\\search.css", "src/app/pages/search/search.ts", "src/app/pages/search/search.spec.ts"],
  "sourcesContent": ["<div class=\"container py-5 mt-5\">\r\n\t<h3 class=\"mb-3\">Arama: \"{{ query() }}\"</h3>\r\n\t@if(loading()){\r\n\t\t<div class=\"d-flex align-items-center gap-2 text-muted\">\r\n\t\t\t<div class=\"spinner-border spinner-border-sm\" role=\"status\"></div>\r\n\t\t\t<span>Aran\u0131yor...</span>\r\n\t\t</div>\r\n\t} @else if(!results().length){\r\n\t\t<div class=\"alert alert-info\">Sonu\u00E7 bulunamad\u0131.</div>\r\n\t} @else {\r\n\t\t@for(kind of kinds(); track kind){\r\n\t\t\t<div class=\"mb-4\">\r\n\t\t\t\t<h5 class=\"text-uppercase small fw-bold\">{{ kind }}</h5>\r\n\t\t\t\t<div class=\"list-group\">\r\n\t\t\t\t\t@for(r of grouped()[kind]; track r.id){\r\n\t\t\t\t\t\t<a *ngIf=\"r.relatedCourseId\" [routerLink]=\"['/courses', r.relatedCourseId]\" class=\"list-group-item list-group-item-action\">\r\n\t\t\t\t\t\t\t<strong>{{ r.title }}</strong>\r\n\t\t\t\t\t\t\t@if(r.subtitle){<small class=\"text-muted ms-2\">{{ r.subtitle }}</small>}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<div *ngIf=\"!r.relatedCourseId\" class=\"list-group-item\">\r\n\t\t\t\t\t\t\t<strong>{{ r.title }}</strong>\r\n\t\t\t\t\t\t\t@if(r.subtitle){<small class=\"text-muted ms-2\">{{ r.subtitle }}</small>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t}\r\n\t}\r\n</div>\r\n", "/* src/app/pages/search/search.css */\n/*# sourceMappingURL=search.css.map */\n", "import { Component, inject, signal, computed, effect } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SearchService, GlobalSearchResult } from '../../services/search.service';\r\nimport { Api } from '../../api';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './search.html',\r\n  styleUrl: './search.css'\r\n})\r\nexport class Search {\r\n  private route = inject(ActivatedRoute);\r\n  private searchService = inject(SearchService);\r\n  private api = inject(Api);\r\n\r\n  query = signal('');\r\n  results = signal<GlobalSearchResult[]>([]);\r\n  loading = signal(false);\r\n\r\n  constructor(){\r\n    effect(() => {\r\n      const qp = this.route.snapshot.queryParamMap.get('q') || '';\r\n      if(qp !== this.query()){\r\n        this.query.set(qp);\r\n        this.run(qp);\r\n      }\r\n    });\r\n  }\r\n\r\n  private run(q: string){\r\n    const val = q.trim();\r\n    if(!val){\r\n      this.results.set([]);\r\n      return;\r\n    }\r\n    this.loading.set(true);\r\n    this.searchService.search(val).subscribe(r => {\r\n      this.results.set(r);\r\n      this.loading.set(false);\r\n    });\r\n  }\r\n\r\n  grouped = computed(() => {\r\n    const groups: Record<string, GlobalSearchResult[]> = {};\r\n    for(const r of this.results()){\r\n      groups[r.type] = groups[r.type] || [];\r\n      groups[r.type].push(r);\r\n    }\r\n    return groups;\r\n  });\r\n  kinds = computed(() => Object.keys(this.grouped()));\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Search } from './search';\r\nimport { globalTestConfig } from '../../../test-setup';\r\n\r\ndescribe('Search', () => {\r\n  let component: Search;\r\n  let fixture: ComponentFixture<Search>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Search],\r\n      providers: [...globalTestConfig.providers]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Search);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,eAAA;AAAA;AAAA,IAAAD,kBAAA;AAAA;AAAA;;;ICYa;;;;;;;AAZb;AACA;AACA;AACA;AACA;AAQO,IAAM,SAAN,MAAME,QAAM;MACT,QAAQ,OAAO,cAAc;MAC7B,gBAAgB,OAAO,aAAa;MACpC,MAAM,OAAO,GAAG;MAExB,QAAQ,OAAO,EAAE;MACjB,UAAU,OAA6B,CAAA,CAAE;MACzC,UAAU,OAAO,KAAK;MAEtB,cAAA;AACE,eAAO,MAAK;AACV,gBAAM,KAAK,KAAK,MAAM,SAAS,cAAc,IAAI,GAAG,KAAK;AACzD,cAAG,OAAO,KAAK,MAAK,GAAG;AACrB,iBAAK,MAAM,IAAI,EAAE;AACjB,iBAAK,IAAI,EAAE;UACb;QACF,CAAC;MACH;MAEQ,IAAI,GAAS;AACnB,cAAM,MAAM,EAAE,KAAI;AAClB,YAAG,CAAC,KAAI;AACN,eAAK,QAAQ,IAAI,CAAA,CAAE;AACnB;QACF;AACA,aAAK,QAAQ,IAAI,IAAI;AACrB,aAAK,cAAc,OAAO,GAAG,EAAE,UAAU,OAAI;AAC3C,eAAK,QAAQ,IAAI,CAAC;AAClB,eAAK,QAAQ,IAAI,KAAK;QACxB,CAAC;MACH;MAEA,UAAU,SAAS,MAAK;AACtB,cAAM,SAA+C,CAAA;AACrD,mBAAU,KAAK,KAAK,QAAO,GAAG;AAC5B,iBAAO,EAAE,IAAI,IAAI,OAAO,EAAE,IAAI,KAAK,CAAA;AACnC,iBAAO,EAAE,IAAI,EAAE,KAAK,CAAC;QACvB;AACA,eAAO;MACT,CAAC;MACD,QAAQ,SAAS,MAAM,OAAO,KAAK,KAAK,QAAO,CAAE,CAAC;;;AAxCvC,aAAM,WAAA;MANlB,UAAU;QACT,UAAU;QACV,SAAS,CAAC,cAAc,YAAY;QACpC,UAAA;;OAED;OACY,MAAM;;;;;ACZnB;;;AACA,IAAAC;AACA;AAEA,aAAS,UAAU,MAAK;AACtB,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,MAAM;UAChB,WAAW,CAAC,GAAG,iBAAiB,SAAS;SAC1C,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,MAAM;AACxC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["search_default", "init_search", "Search", "init_search"]
}
