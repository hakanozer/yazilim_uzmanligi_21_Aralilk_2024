{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\pages\\profile\\profile.html", "angular:jit:style:src\\app\\pages\\profile\\profile.css", "src/app/services/cache.service.ts", "src/app/pages/profile/profile.ts", "src/app/pages/profile/profile.spec.ts"],
  "sourcesContent": ["<app-background-item></app-background-item>\r\n<div class=\"row mt-5 p-5\">\r\n  <div class=\"col-3\"></div>\r\n  <div class=\"col-6\">\r\n    <div class=\"card p-3\">\r\n      <div class=\"text-center\">\r\n        <img [src]=\"profilePhoto\" width=\"120\" height=\"120\" alt=\"Profil Foto\u011Fraf\u0131\" class=\"rounded-circle mx-auto d-block\" />\r\n        <h3 class=\"mt-2 mb-1\">{{ user?.name }} {{ user?.surname }}</h3>\r\n        <p class=\"mb-1\">{{ user?.email }}</p>\r\n        @if(user?.role){\r\n          <span class=\"badge\" [class.bg-primary]=\"user?.role==='student'\" [class.bg-warning]=\"user?.role==='instructor'\" [class.text-dark]=\"user?.role==='instructor'\">\r\n            {{ user?.role === 'student' ? '\u00D6\u011Frenci' : 'E\u011Fitici' }}\r\n          </span>\r\n        }\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      @if(loading()){ \r\n        <div class=\"d-flex flex-column align-items-center py-4 text-muted\">\r\n          <div class=\"spinner-border mb-3\" role=\"status\" style=\"width:2.5rem;height:2.5rem\">\r\n            <span class=\"visually-hidden\">Y\u00FCkleniyor...</span>\r\n          </div>\r\n          <div>Profil verileri y\u00FCkleniyor...</div>\r\n        </div>\r\n      } @else if(empty()) {\r\n        <div class=\"alert alert-info m-0\">Hen\u00FCz g\u00F6r\u00FCnt\u00FClenecek kurs bulunmuyor.</div>\r\n      } @else {\r\n        @if(user?.role==='student'){\r\n          <div class=\"d-flex gap-2 flex-wrap mb-3\">\r\n            <div class=\"badge bg-secondary\">Kurs Say\u0131s\u0131: {{ studentMetrics().courseCount }}</div>\r\n            <div class=\"badge bg-secondary\">Toplam S\u00FCre: {{ studentMetrics().totalHours }}s</div>\r\n            <div class=\"badge bg-secondary\">Toplam Tutar: {{ studentMetrics().totalPrice | currency:'TRY' }}</div>\r\n          </div>\r\n        }\r\n        @if(user?.role==='instructor'){\r\n          <div class=\"d-flex gap-2 flex-wrap mb-3\">\r\n            <div class=\"badge bg-secondary\">E\u011Fitim Say\u0131s\u0131: {{ instructorMetrics().courseCount }}</div>\r\n            <div class=\"badge bg-secondary\">Toplam \u00D6\u011Frenci: {{ instructorMetrics().totalStudents }}</div>\r\n          </div>\r\n        }\r\n        @if(!user?.role || user?.role === 'student'){\r\n          <h5>Al\u0131nan Kurslar</h5>\r\n          <div class=\"row mt-3 g-3\">\r\n            @for(cat of categories(); track cat.id){\r\n              @if(groupedCourses()[cat.id] && groupedCourses()[cat.id].length){\r\n                <div class=\"col-12\">\r\n                  <h6>{{ cat.name }}</h6>\r\n                </div>\r\n                @for(c of groupedCourses()[cat.id]; track c.id){\r\n                  <div class=\"col-md-4\">\r\n                    <div class=\"card h-100\">\r\n                      <img [src]=\"c.image || 'assets/logo.png'\" width=\"160\" height=\"160\" class=\"card-img-top\" alt=\"{{ c.title }}\" style=\"object-fit: cover; height: auto\" />\r\n                      <div class=\"card-body d-flex flex-column\">\r\n                        <h5 class=\"card-title\">{{ c.title }}</h5>\r\n                        <p class=\"card-text text-muted\">{{ c.instructorName }}</p>\r\n                        <p class=\"card-text\">{{ c.description }}</p>\r\n                        <div class=\"mt-auto d-flex justify-content-between align-items-center\">\r\n                          <strong>{{ c.price | currency : 'TRY' }}</strong>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                }\r\n              }\r\n            }\r\n          </div>\r\n        }\r\n\r\n        @if(user?.role === 'instructor'){\r\n          <h5>Verilen Kurslar</h5>\r\n          @for(cat of categories(); track cat.id){\r\n            @if(groupedCourses()[cat.id] && groupedCourses()[cat.id].length){\r\n              <h6>{{ cat.name }}</h6>\r\n              <ul class=\"mb-3\">\r\n                @for(c of groupedCourses()[cat.id]; track c.id){\r\n                  <li>{{ c.title }}</li>\r\n                }\r\n              </ul>\r\n            }\r\n          }\r\n        }\r\n      }\r\n    </div>\r\n  </div>\r\n  <div class=\"col-3\"></div>\r\n</div>\r\n", "/* src/app/pages/profile/profile.css */\n/*# sourceMappingURL=profile.css.map */\n", "import { Injectable } from '@angular/core';\r\n\r\ninterface CacheEntry<T> { data: T; ts: number; ttl: number; }\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CacheService {\r\n  private store = new Map<string, CacheEntry<any>>();\r\n  private readonly defaultTtlMs = 60_000; // 60s\r\n\r\n  get<T>(key: string): T | null {\r\n    const entry = this.store.get(key);\r\n    if (!entry) return null;\r\n    if (Date.now() - entry.ts > entry.ttl) {\r\n      this.store.delete(key);\r\n      return null;\r\n    }\r\n    return entry.data as T;\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttlMs?: number) {\r\n    this.store.set(key, { data, ts: Date.now(), ttl: ttlMs ?? this.defaultTtlMs });\r\n  }\r\n\r\n  has(key: string) {\r\n    return !!this.get(key);\r\n  }\r\n\r\n  clear(key?: string) {\r\n    if (key) this.store.delete(key); else this.store.clear();\r\n  }\r\n}\r\n", "import { Component, inject, OnInit, effect, OnDestroy, signal, computed } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { CacheService } from '../../services/cache.service';\r\nimport { BackgroundItem } from \"../../components/background-item/background-item\";\r\nimport { AuthService, UserDto } from '../../services/auth.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Api } from '../../api';\r\nimport { EnrollmentService } from '../../services/enrollment.service';\r\nimport { forkJoin, of } from 'rxjs';\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface Course {\r\n  id: string;\r\n  title: string;\r\n  categoryId: string;\r\n  instructorId: string;\r\n  image?: string;\r\n  instructorName?: string;\r\n  description?: string;\r\n  price?: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  imports: [BackgroundItem, CommonModule, RouterModule],\r\n  templateUrl: './profile.html',\r\n  styleUrl: './profile.css'\r\n})\r\nexport class Profile implements OnInit, OnDestroy {\r\n  private auth = inject(AuthService);\r\n  private api = inject(Api);\r\n  private enrollmentEvents = inject(EnrollmentService);\r\n  private route = inject(ActivatedRoute);\r\n  private cache = inject(CacheService);\r\n\r\n  user: UserDto | null = null;\r\n  profilePhoto = 'assets/logo.png';\r\n\r\n  // reactive state (signals)\r\n  readonly categories = signal<Category[]>([]);\r\n  readonly groupedCourses = signal<Record<string, Course[]>>({});\r\n  private readonly allCourses = signal<Course[]>([]);\r\n  readonly loading = signal(true);\r\n  readonly empty = computed(() => !this.loading() && Object.keys(this.groupedCourses()).length === 0);\r\n\r\n  // Öğrenci metrikleri: alınan kurs listesini group map'inden düzleştirip hesapla\r\n  readonly studentCourseList = computed(() => {\r\n    if (!this.user || this.user.role !== 'student') return [] as any[];\r\n    const groups = this.groupedCourses();\r\n    const all: any[] = [];\r\n    for (const k of Object.keys(groups)) {\r\n      all.push(...groups[k]);\r\n    }\r\n    return all;\r\n  });\r\n\r\n  readonly studentMetrics = computed(() => {\r\n    if (!this.user || this.user.role !== 'student') return { courseCount: 0, totalPrice: 0, totalHours: 0 };\r\n    const list = this.studentCourseList();\r\n    let totalPrice = 0;\r\n    let totalHours = 0;\r\n    for (const c of list) {\r\n      if (typeof c.price === 'number') totalPrice += c.price;\r\n      if (typeof c.durationHours === 'number') totalHours += c.durationHours;\r\n    }\r\n    return {\r\n      courseCount: list.length,\r\n      totalPrice: Number(totalPrice.toFixed(2)),\r\n      totalHours\r\n    };\r\n  });\r\n\r\n  readonly instructorMetrics = computed(() => {\r\n    if (this.user?.role !== 'instructor') return { courseCount: 0, totalStudents: 0 };\r\n    const all = this.allCourses();\r\n    const mine = all.filter((c: Course) => c.instructorId === this.user?.id);\r\n    const courseCount = mine.length;\r\n    const totalStudents = mine.reduce((sum: number, c: Course) => sum + (Array.isArray((c as any).students) ? (c as any).students.length : 0), 0);\r\n    return { courseCount, totalStudents };\r\n  });\r\n\r\n  // Eski manuel effect referansları kaldırıldı; Angular runtime cleanup'a bırakıyoruz.\r\n\r\n  // Effects injection context: tanımlar property initializer olarak yapılır\r\n  private readonly _enrollmentEffect = effect(() => {\r\n    this.enrollmentEvents.version();\r\n    if (!this.user) return;\r\n    if (this.user.role && this.user.role !== 'student') return;\r\n    if (this.allCourses().length) {\r\n      this.cache.clear(`profile:${this.user.id}`);\r\n      this.recomputeStudentGrouping();\r\n    }\r\n  });\r\n\r\n  private readonly _userSyncEffect = effect(() => {\r\n    const u = this.auth.currentUser();\r\n    if (!u) return;\r\n    if (this.user && this.user.id === u.id) return;\r\n    const firstTime = !this.user;\r\n    this.applyUser(u, true);\r\n    if (firstTime && !this.allCourses().length) {\r\n      this.loading.set(true);\r\n      const isStudent = (u.role || 'student') === 'student';\r\n      const categories$ = this.api.list<any>('categories');\r\n      const courses$ = this.api.list<any>('courses');\r\n      const enrollments$ = isStudent ? this.api.list<any>('enrollments', { userId: u.id }) : of<any[]>([]);\r\n      forkJoin({ categories: categories$, courses: courses$, enrollments: enrollments$ }).subscribe(({ categories, courses, enrollments }) => {\r\n        this.categories.set(categories);\r\n        this.allCourses.set(courses);\r\n        if (isStudent) {\r\n          const ids = new Set(enrollments.map((e: any) => e.courseId));\r\n          const my = courses.filter((c: any) => ids.has(c.id));\r\n          this.groupedCourses.set(this.groupByCategory(my));\r\n        } else {\r\n          const mine = courses.filter((c: any) => c.instructorId === u.id);\r\n          this.groupedCourses.set(this.groupByCategory(mine));\r\n        }\r\n        this.loading.set(false);\r\n      });\r\n    }\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    // İlk değer (varsa) alınır; yoksa effect ile sonradan gelecektir.\r\n    const initial = this.auth.currentUser();\r\n    if (initial) {\r\n      this.applyUser(initial, false);\r\n    }\r\n\r\n  // Resolver'dan preload edilmiş veriyi al\r\n    const data = this.route.snapshot.data['profileData'] as any;\r\n    if (data) {\r\n      this.categories.set(data.categories || []);\r\n      const all = data.courses || [];\r\n      this.allCourses.set(all);\r\n      if (this.user?.role === 'instructor') {\r\n        const my = all.filter((c: any) => c.instructorId === this.user!.id);\r\n        this.groupedCourses.set(this.groupByCategory(my));\r\n        this.loading.set(false);\r\n      } else {\r\n        // öğrenci: resolver enrollments verdi\r\n        const enrollments = data.enrollments || [];\r\n        const enrolledIds = new Set(enrollments.map((e: any) => e.courseId));\r\n        const my = all.filter((c: any) => enrolledIds.has(c.id));\r\n        this.groupedCourses.set(this.groupByCategory(my));\r\n        this.loading.set(false);\r\n      }\r\n    } else {\r\n      // Fallback: eski yol (normalde olmaz)\r\n      this.loading.set(false);\r\n    }\r\n\r\n    // Eski ngOnInit içi effects kaldırıldı; property initializer effect'leri zaten çalışıyor.\r\n\r\n  }\r\n\r\n  // Enrollment değişince sadece enrollments'ı yeniden al (öğrenci ise)\r\n  private refetchEnrollments() {\r\n    if (!this.user || this.user.role !== 'student') return;\r\n    this.api.list<any>('enrollments', { userId: this.user.id }).subscribe(enrolls => {\r\n      const enrolledCourseIds = new Set(enrolls.map(e => e.courseId));\r\n      const my = this.allCourses().filter(c => enrolledCourseIds.has(c.id));\r\n      this.groupedCourses.set(this.groupByCategory(my));\r\n    });\r\n  }\r\n\r\n  private recomputeStudentGrouping() {\r\n    // Kayıtları yeniden çek (json-server basit olduğu için tekrar sorgu maliyeti düşük)\r\n    this.refetchEnrollments();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  private groupByCategory(list: Course[]) {\r\n    const map: Record<string, Course[]> = {};\r\n    for (const c of list) {\r\n      map[c.categoryId] = map[c.categoryId] || [];\r\n      map[c.categoryId].push(c);\r\n    }\r\n    return map;\r\n  }\r\n\r\n  private applyUser(u: UserDto, late: boolean) {\r\n    let updated = u;\r\n    if (!u.role) {\r\n      updated = { ...u, role: 'student' } as any;\r\n      localStorage.setItem('currentUser', JSON.stringify(updated));\r\n      this.auth.currentUser.set(updated);\r\n    }\r\n    this.user = updated;\r\n    this.profilePhoto = updated.profilePhoto || this.profilePhoto;\r\n    // Resolver verisi zaten yüklenmiş olabilir; grouping'i şimdi yap\r\n    if (this.allCourses().length) {\r\n      if (updated.role === 'instructor') {\r\n        const my = this.allCourses().filter(c => c.instructorId === updated.id);\r\n        this.groupedCourses.set(this.groupByCategory(my));\r\n      } else {\r\n        // Öğrenci ise enrollments yoksa getir\r\n        this.refetchEnrollments();\r\n      }\r\n      this.loading.set(false);\r\n    }\r\n  }\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Profile } from './profile';\r\nimport { globalTestConfig } from '../../../test-setup';\r\n\r\ndescribe('Profile', () => {\r\n  let component: Profile;\r\n  let fixture: ComponentFixture<Profile>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Profile],\r\n      providers: [...globalTestConfig.providers]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Profile);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappingsgBAAA;AAAA;AAAA,IAAAD,mBAAA;AAAA;AAAA;;;ICKa;;;;;AALb;AAKO,IAAM,eAAN,MAAME,cAAY;MACf,QAAQ,oBAAI,IAAG;MACN,eAAe;;MAEhC,IAAO,KAAW;AAChB,cAAM,QAAQ,KAAK,MAAM,IAAI,GAAG;AAChC,YAAI,CAAC;AAAO,iBAAO;AACnB,YAAI,KAAK,IAAG,IAAK,MAAM,KAAK,MAAM,KAAK;AACrC,eAAK,MAAM,OAAO,GAAG;AACrB,iBAAO;QACT;AACA,eAAO,MAAM;MACf;MAEA,IAAO,KAAa,MAAS,OAAc;AACzC,aAAK,MAAM,IAAI,KAAK,EAAE,MAAM,IAAI,KAAK,IAAG,GAAI,KAAK,SAAS,KAAK,aAAY,CAAE;MAC/E;MAEA,IAAI,KAAW;AACb,eAAO,CAAC,CAAC,KAAK,IAAI,GAAG;MACvB;MAEA,MAAM,KAAY;AAChB,YAAI;AAAK,eAAK,MAAM,OAAO,GAAG;;AAAQ,eAAK,MAAM,MAAK;MACxD;;AAxBW,mBAAY,WAAA;MADxB,WAAW,EAAE,YAAY,OAAM,CAAE;OACrB,YAAY;;;;;IC2BZ;;;;;;;AAhCb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBO,IAAM,UAAN,MAAMC,SAAO;MACV,OAAO,OAAO,WAAW;MACzB,MAAM,OAAO,GAAG;MAChB,mBAAmB,OAAO,iBAAiB;MAC3C,QAAQ,OAAO,cAAc;MAC7B,QAAQ,OAAO,YAAY;MAEnC,OAAuB;MACvB,eAAe;;MAGN,aAAa,OAAmB,CAAA,CAAE;MAClC,iBAAiB,OAAiC,CAAA,CAAE;MAC5C,aAAa,OAAiB,CAAA,CAAE;MACxC,UAAU,OAAO,IAAI;MACrB,QAAQ,SAAS,MAAM,CAAC,KAAK,QAAO,KAAM,OAAO,KAAK,KAAK,eAAc,CAAE,EAAE,WAAW,CAAC;;MAGzF,oBAAoB,SAAS,MAAK;AACzC,YAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAAW,iBAAO,CAAA;AACvD,cAAM,SAAS,KAAK,eAAc;AAClC,cAAM,MAAa,CAAA;AACnB,mBAAW,KAAK,OAAO,KAAK,MAAM,GAAG;AACnC,cAAI,KAAK,GAAG,OAAO,CAAC,CAAC;QACvB;AACA,eAAO;MACT,CAAC;MAEQ,iBAAiB,SAAS,MAAK;AACtC,YAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAAW,iBAAO,EAAE,aAAa,GAAG,YAAY,GAAG,YAAY,EAAC;AACrG,cAAM,OAAO,KAAK,kBAAiB;AACnC,YAAI,aAAa;AACjB,YAAI,aAAa;AACjB,mBAAW,KAAK,MAAM;AACpB,cAAI,OAAO,EAAE,UAAU;AAAU,0BAAc,EAAE;AACjD,cAAI,OAAO,EAAE,kBAAkB;AAAU,0BAAc,EAAE;QAC3D;AACA,eAAO;UACL,aAAa,KAAK;UAClB,YAAY,OAAO,WAAW,QAAQ,CAAC,CAAC;UACxC;;MAEJ,CAAC;MAEQ,oBAAoB,SAAS,MAAK;AACzC,YAAI,KAAK,MAAM,SAAS;AAAc,iBAAO,EAAE,aAAa,GAAG,eAAe,EAAC;AAC/E,cAAM,MAAM,KAAK,WAAU;AAC3B,cAAM,OAAO,IAAI,OAAO,CAAC,MAAc,EAAE,iBAAiB,KAAK,MAAM,EAAE;AACvE,cAAM,cAAc,KAAK;AACzB,cAAM,gBAAgB,KAAK,OAAO,CAAC,KAAa,MAAc,OAAO,MAAM,QAAS,EAAU,QAAQ,IAAK,EAAU,SAAS,SAAS,IAAI,CAAC;AAC5I,eAAO,EAAE,aAAa,cAAa;MACrC,CAAC;;;MAKgB,oBAAoB,OAAO,MAAK;AAC/C,aAAK,iBAAiB,QAAO;AAC7B,YAAI,CAAC,KAAK;AAAM;AAChB,YAAI,KAAK,KAAK,QAAQ,KAAK,KAAK,SAAS;AAAW;AACpD,YAAI,KAAK,WAAU,EAAG,QAAQ;AAC5B,eAAK,MAAM,MAAM,WAAW,KAAK,KAAK,EAAE,EAAE;AAC1C,eAAK,yBAAwB;QAC/B;MACF,CAAC;MAEgB,kBAAkB,OAAO,MAAK;AAC7C,cAAM,IAAI,KAAK,KAAK,YAAW;AAC/B,YAAI,CAAC;AAAG;AACR,YAAI,KAAK,QAAQ,KAAK,KAAK,OAAO,EAAE;AAAI;AACxC,cAAM,YAAY,CAAC,KAAK;AACxB,aAAK,UAAU,GAAG,IAAI;AACtB,YAAI,aAAa,CAAC,KAAK,WAAU,EAAG,QAAQ;AAC1C,eAAK,QAAQ,IAAI,IAAI;AACrB,gBAAM,aAAa,EAAE,QAAQ,eAAe;AAC5C,gBAAM,cAAc,KAAK,IAAI,KAAU,YAAY;AACnD,gBAAM,WAAW,KAAK,IAAI,KAAU,SAAS;AAC7C,gBAAM,eAAe,YAAY,KAAK,IAAI,KAAU,eAAe,EAAE,QAAQ,EAAE,GAAE,CAAE,IAAI,GAAU,CAAA,CAAE;AACnG,mBAAS,EAAE,YAAY,aAAa,SAAS,UAAU,aAAa,aAAY,CAAE,EAAE,UAAU,CAAC,EAAE,YAAY,SAAS,YAAW,MAAM;AACrI,iBAAK,WAAW,IAAI,UAAU;AAC9B,iBAAK,WAAW,IAAI,OAAO;AAC3B,gBAAI,WAAW;AACb,oBAAM,MAAM,IAAI,IAAI,YAAY,IAAI,CAAC,MAAW,EAAE,QAAQ,CAAC;AAC3D,oBAAM,KAAK,QAAQ,OAAO,CAAC,MAAW,IAAI,IAAI,EAAE,EAAE,CAAC;AACnD,mBAAK,eAAe,IAAI,KAAK,gBAAgB,EAAE,CAAC;YAClD,OAAO;AACL,oBAAM,OAAO,QAAQ,OAAO,CAAC,MAAW,EAAE,iBAAiB,EAAE,EAAE;AAC/D,mBAAK,eAAe,IAAI,KAAK,gBAAgB,IAAI,CAAC;YACpD;AACA,iBAAK,QAAQ,IAAI,KAAK;UACxB,CAAC;QACH;MACF,CAAC;MAED,WAAQ;AAEN,cAAM,UAAU,KAAK,KAAK,YAAW;AACrC,YAAI,SAAS;AACX,eAAK,UAAU,SAAS,KAAK;QAC/B;AAGA,cAAM,OAAO,KAAK,MAAM,SAAS,KAAK,aAAa;AACnD,YAAI,MAAM;AACR,eAAK,WAAW,IAAI,KAAK,cAAc,CAAA,CAAE;AACzC,gBAAM,MAAM,KAAK,WAAW,CAAA;AAC5B,eAAK,WAAW,IAAI,GAAG;AACvB,cAAI,KAAK,MAAM,SAAS,cAAc;AACpC,kBAAM,KAAK,IAAI,OAAO,CAAC,MAAW,EAAE,iBAAiB,KAAK,KAAM,EAAE;AAClE,iBAAK,eAAe,IAAI,KAAK,gBAAgB,EAAE,CAAC;AAChD,iBAAK,QAAQ,IAAI,KAAK;UACxB,OAAO;AAEL,kBAAM,cAAc,KAAK,eAAe,CAAA;AACxC,kBAAM,cAAc,IAAI,IAAI,YAAY,IAAI,CAAC,MAAW,EAAE,QAAQ,CAAC;AACnE,kBAAM,KAAK,IAAI,OAAO,CAAC,MAAW,YAAY,IAAI,EAAE,EAAE,CAAC;AACvD,iBAAK,eAAe,IAAI,KAAK,gBAAgB,EAAE,CAAC;AAChD,iBAAK,QAAQ,IAAI,KAAK;UACxB;QACF,OAAO;AAEL,eAAK,QAAQ,IAAI,KAAK;QACxB;MAIF;;MAGQ,qBAAkB;AACxB,YAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,SAAS;AAAW;AAChD,aAAK,IAAI,KAAU,eAAe,EAAE,QAAQ,KAAK,KAAK,GAAE,CAAE,EAAE,UAAU,aAAU;AAC9E,gBAAM,oBAAoB,IAAI,IAAI,QAAQ,IAAI,OAAK,EAAE,QAAQ,CAAC;AAC9D,gBAAM,KAAK,KAAK,WAAU,EAAG,OAAO,OAAK,kBAAkB,IAAI,EAAE,EAAE,CAAC;AACpE,eAAK,eAAe,IAAI,KAAK,gBAAgB,EAAE,CAAC;QAClD,CAAC;MACH;MAEQ,2BAAwB;AAE9B,aAAK,mBAAkB;MACzB;MAEA,cAAW;MAAI;MAEP,gBAAgB,MAAc;AACpC,cAAM,MAAgC,CAAA;AACtC,mBAAW,KAAK,MAAM;AACpB,cAAI,EAAE,UAAU,IAAI,IAAI,EAAE,UAAU,KAAK,CAAA;AACzC,cAAI,EAAE,UAAU,EAAE,KAAK,CAAC;QAC1B;AACA,eAAO;MACT;MAEQ,UAAU,GAAY,MAAa;AACzC,YAAI,UAAU;AACd,YAAI,CAAC,EAAE,MAAM;AACX,oBAAU,iCAAK,IAAL,EAAQ,MAAM,UAAS;AACjC,uBAAa,QAAQ,eAAe,KAAK,UAAU,OAAO,CAAC;AAC3D,eAAK,KAAK,YAAY,IAAI,OAAO;QACnC;AACA,aAAK,OAAO;AACZ,aAAK,eAAe,QAAQ,gBAAgB,KAAK;AAEjD,YAAI,KAAK,WAAU,EAAG,QAAQ;AAC5B,cAAI,QAAQ,SAAS,cAAc;AACjC,kBAAM,KAAK,KAAK,WAAU,EAAG,OAAO,OAAK,EAAE,iBAAiB,QAAQ,EAAE;AACtE,iBAAK,eAAe,IAAI,KAAK,gBAAgB,EAAE,CAAC;UAClD,OAAO;AAEL,iBAAK,mBAAkB;UACzB;AACA,eAAK,QAAQ,IAAI,KAAK;QACxB;MACF;;AA9KW,cAAO,WAAA;MANnB,UAAU;QACT,UAAU;QACV,SAAS,CAAC,gBAAgB,cAAc,YAAY;QACpD,UAAA;;OAED;OACY,OAAO;;;;;AChCpB;;;AACA,IAAAC;AACA;AAEA,aAAS,WAAW,MAAK;AACvB,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,OAAO;UACjB,WAAW,CAAC,GAAG,iBAAiB,SAAS;SAC1C,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,OAAO;AACzC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["profile_default", "init_profile", "CacheService", "Profile", "init_profile"]
}
