{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import { inject, Injectable, signal } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\n\r\nexport interface UserDto {\r\n  id?: string | number;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  password: string;\r\n  profilePhoto?: string;\r\n  role?: 'student' | 'instructor' | 'admin';\r\n  bio?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\nexport class AuthService {\r\n  private http = inject(HttpClient);\r\n  private readonly api = environment.apiBaseUrl;\r\n\r\n  // localStorage destekli auth state\r\n  readonly currentUser = signal<UserDto | null>(this.loadUserFromStorage());\r\n\r\n  private loadUserFromStorage(): UserDto | null {\r\n    if (typeof window === 'undefined') return null;\r\n    const raw = localStorage.getItem('currentUser');\r\n    if (!raw) return null;\r\n    try {\r\n      return JSON.parse(raw);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  register(user: Omit<UserDto, 'id'>): Observable<UserDto> {\r\n    return this.http.post<UserDto>(`${this.api}/users`, user);\r\n  }\r\n\r\n\r\n  login(email: string, password: string): Observable<UserDto | null> {\r\n    return this.http\r\n      .get<UserDto[]>(`${this.api}/users`, { params: { email } })\r\n      .pipe(\r\n        map(list => {\r\n          const found = list.find(u => u.password === password);\r\n          if (found) {\r\n            // ParolayÄ± client storage'a koyma\r\n            const { password, ...safeUser } = found as any;\r\n            this.currentUser.set(safeUser);\r\n            localStorage.setItem('currentUser', JSON.stringify(safeUser));\r\n          } else {\r\n            this.currentUser.set(null);\r\n            localStorage.removeItem('currentUser');\r\n          }\r\n          return found ?? null;\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    this.currentUser.set(null);\r\n    localStorage.removeItem('currentUser');\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;IAkBa;;;;;AAlBb;AACA;AACA;AACA;AAeO,IAAM,cAAN,MAAMA,aAAW;MACd,OAAO,OAAO,UAAU;MACf,MAAM,YAAY;;MAG1B,cAAc,OAAuB,KAAK,oBAAmB,CAAE;MAEhE,sBAAmB;AACzB,YAAI,OAAO,WAAW;AAAa,iBAAO;AAC1C,cAAM,MAAM,aAAa,QAAQ,aAAa;AAC9C,YAAI,CAAC;AAAK,iBAAO;AACjB,YAAI;AACF,iBAAO,KAAK,MAAM,GAAG;QACvB,QAAQ;AACN,iBAAO;QACT;MACF;MAGA,SAAS,MAAyB;AAChC,eAAO,KAAK,KAAK,KAAc,GAAG,KAAK,GAAG,UAAU,IAAI;MAC1D;MAGA,MAAM,OAAe,UAAgB;AACnC,eAAO,KAAK,KACT,IAAe,GAAG,KAAK,GAAG,UAAU,EAAE,QAAQ,EAAE,MAAK,EAAE,CAAE,EACzD,KACC,IAAI,UAAO;AACT,gBAAM,QAAQ,KAAK,KAAK,OAAK,EAAE,aAAa,QAAQ;AACpD,cAAI,OAAO;AAET,kBAAkC,YAA1B,YAAAC,cAA0B,IAAb,qBAAa,IAAb,CAAb;AACR,iBAAK,YAAY,IAAI,QAAQ;AAC7B,yBAAa,QAAQ,eAAe,KAAK,UAAU,QAAQ,CAAC;UAC9D,OAAO;AACL,iBAAK,YAAY,IAAI,IAAI;AACzB,yBAAa,WAAW,aAAa;UACvC;AACA,iBAAO,SAAS;QAClB,CAAC,CAAC;MAER;MAEA,SAAM;AACJ,aAAK,YAAY,IAAI,IAAI;AACzB,qBAAa,WAAW,aAAa;MACvC;;AA/CW,kBAAW,WAAA;MAFvB,WAAW,EAAE,YAAY,OAAM,CAAE;OAErB,WAAW;;;",
  "names": ["AuthService", "password"]
}
