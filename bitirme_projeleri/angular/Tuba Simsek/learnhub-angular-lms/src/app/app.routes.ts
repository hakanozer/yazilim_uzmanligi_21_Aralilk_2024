import { CourseDetail } from './pages/course-detail/course-detail';
import { Component } from '@angular/core';
import { Routes } from '@angular/router';
import { Login } from './pages/login/login';
import { Register } from './pages/register/register';
import { authGuard } from './auth-guard';
import { notauthGuard } from './notauth-guard';
import { roleGuard } from './role-guard';
import { Notfound } from './pages/notfound/notfound';
import { Search } from './pages/search/search';
import { Blog } from './pages/blog/blog';
import { Courses } from './pages/courses/courses';
import { Instructor } from './pages/instructor/instructor';
import { Student } from './pages/student/student';


export const routes: Routes = [
    {path: "", component: Login, canActivate: [notauthGuard]}, //KullanÄ±cÄ± http://localhost:4200/ adresine gittiÄŸinde Login sayfasÄ± yÃ¼klenir. Yani bu, varsayÄ±lan aÃ§Ä±lÄ±ÅŸ sayfasÄ±dÄ±r.
    {path: "register", component: Register}, //KullanÄ±cÄ± http://localhost:4201/register adresine gittiÄŸinde Register sayfasÄ± aÃ§Ä±lÄ±r.
    {path: "courses", component: Courses, canActivate: [authGuard]},
    { path: "course-detail/:id", component: CourseDetail, canActivate: [authGuard] },
    {path: "search", component: Search, canActivate: [authGuard]},
    {path: "blog", component: Blog, canActivate: [authGuard]},

    // sadece instructor eriÅŸebilsin
     { path: "instructor", component: Instructor, canActivate: [authGuard , roleGuard(['instructor'])] },

    // sadece student eriÅŸebilsin 
    { path: "student", component: Student, canActivate: [authGuard, roleGuard(['student'])] },

    { path: "**", component: Notfound} 

  ];




  
/*Bu kod parÃ§alarÄ±, Angular uygulamasÄ±nda routing (yÃ¶nlendirme) iÅŸlemlerini tanÄ±mlar. 
Angularâ€™Ä±n @angular/router modÃ¼lÃ¼ ile sayfa geÃ§iÅŸlerini (SPA mantÄ±ÄŸÄ±nda) kontrol edebilmeni saÄŸlar.

ğŸ“Œ SatÄ±r SatÄ±r AÃ§Ä±klama:

 import { Routes } from '@angular/router';
--> Angularâ€™Ä±n yÃ¶nlendirme sistemi iÃ§in gerekli olan Routes tipini iÃ§e aktarÄ±r.
--> Routes bir dizi (array) tanÄ±mÄ±dÄ±r ve her Ã¶ÄŸe bir yol (path) ile eÅŸleÅŸen bir bileÅŸeni (component) temsil eder.

import { Login } from './pages/login/login';
--> Login bileÅŸeni iÃ§e aktarÄ±lÄ±yor. Bu bileÅŸen ./pages/login/ klasÃ¶rÃ¼ iÃ§indeki login.ts dosyasÄ±ndan alÄ±nÄ±r.
--> AynÄ± ÅŸekilde Register bileÅŸeni de iÃ§e aktarÄ±lÄ±yor.
Not: Bu kodda LoginComponent yerine Login yazÄ±lmÄ±ÅŸ. Bu, standalone component kullandÄ±ÄŸÄ±nÄ± gÃ¶steriyor
 (Angular 14+ ile gelen Ã¶zellik). Eskiden bu bileÅŸenler @NgModule iÃ§inde tanÄ±mlanÄ±rdÄ±, artÄ±k
  doÄŸrudan tanÄ±mlanabilir.

  export const routes: Routes = [...]
--> Bu, yÃ¶nlendirme tanÄ±mlarÄ±nÄ± (path â€“ component) iÃ§eren bir dizi (Routes) nesnesi oluÅŸturur ve dÄ±ÅŸa aktarÄ±r.
--> UygulamanÄ±n farklÄ± yerlerinde kullanÄ±lmak Ã¼zere bu routes deÄŸiÅŸkeni dÄ±ÅŸa aÃ§Ä±lÄ±r.

*/